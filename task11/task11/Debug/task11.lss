
task11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080f  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f8  00000000  00000000  00000a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034c  00000000  00000000  00001137  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d7  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000095  00000000  00000000  000018cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <getADC>:

uint16_t getADC()
{
	uint16_t lowbyte;
	uint16_t highbyte;
	lowbyte = ADCL;
  80:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  84:	30 e0       	ldi	r19, 0x00	; 0
	
	ADCSRA |= (1<<ADSC);
  86:	ea e7       	ldi	r30, 0x7A	; 122
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	80 83       	st	Z, r24
	
	while(! ADCSRA && (1<<ADIF)); //loop until read complete
  90:	90 81       	ld	r25, Z
  92:	99 23       	and	r25, r25
  94:	e9 f3       	breq	.-6      	; 0x90 <getADC+0x10>
	highbyte = ADCH;
  96:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	uint16_t finalvalue;
	
	finalvalue = (highbyte << 8)| lowbyte;
	return finalvalue;
}
  9a:	a9 01       	movw	r20, r18
  9c:	58 2b       	or	r21, r24
  9e:	ca 01       	movw	r24, r20
  a0:	08 95       	ret

000000a2 <turnoff>:
void turnoff()
{
	PORTD &= ~(1<<PD5);
  a2:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1<<PD6);
  a4:	5e 98       	cbi	0x0b, 6	; 11
	PORTD &= ~(1<<PD7);
  a6:	5f 98       	cbi	0x0b, 7	; 11
  a8:	08 95       	ret

000000aa <stoplight>:
}

void stoplight(uint16_t val)
{
	if (val <= 300) PORTD |= (1<<PD5);
  aa:	8d 32       	cpi	r24, 0x2D	; 45
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	92 07       	cpc	r25, r18
  b0:	08 f4       	brcc	.+2      	; 0xb4 <stoplight+0xa>
  b2:	5d 9a       	sbi	0x0b, 5	; 11
	if (val >= 300 && val <=600) PORTD |= (1<<PD6);
  b4:	9c 01       	movw	r18, r24
  b6:	2c 52       	subi	r18, 0x2C	; 44
  b8:	31 40       	sbci	r19, 0x01	; 1
  ba:	2d 32       	cpi	r18, 0x2D	; 45
  bc:	31 40       	sbci	r19, 0x01	; 1
  be:	08 f4       	brcc	.+2      	; 0xc2 <stoplight+0x18>
  c0:	5e 9a       	sbi	0x0b, 6	; 11
	if (val > 600) PORTD |= (1<<PD7);
  c2:	89 35       	cpi	r24, 0x59	; 89
  c4:	92 40       	sbci	r25, 0x02	; 2
  c6:	08 f0       	brcs	.+2      	; 0xca <stoplight+0x20>
  c8:	5f 9a       	sbi	0x0b, 7	; 11
  ca:	08 95       	ret

000000cc <loop>:


void loop()
{
	uint16_t valueget;
	valueget = getADC();
  cc:	0e 94 40 00 	call	0x80	; 0x80 <getADC>
	stoplight(valueget);
  d0:	0e 94 55 00 	call	0xaa	; 0xaa <stoplight>
	turnoff();
  d4:	0e 94 51 00 	call	0xa2	; 0xa2 <turnoff>
  d8:	08 95       	ret

000000da <setup>:
}

void setup()
{
	//set lights
	DDRD |= (1<<PD7);
  da:	57 9a       	sbi	0x0a, 7	; 10
	DDRD |= (1<<PD6);
  dc:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1<<PD5);
  de:	55 9a       	sbi	0x0a, 5	; 10
	//start adc
	ADCSRA |= (1<<ADEN);
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	80 83       	st	Z, r24
	//set adc
	ADMUX |= (1<<MUX2) | (1<<MUX0); // adc 5
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	85 60       	ori	r24, 0x05	; 5
  f2:	80 83       	st	Z, r24
	//set adc mode
	ADMUX |= (1<<REFS0);
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret

000000fc <main>:
	//program check
}

int main()
{
	setup();
  fc:	0e 94 6d 00 	call	0xda	; 0xda <setup>
	PORTD |= (1<<PD7);
 100:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f e3       	ldi	r18, 0x3F	; 63
 104:	8d e0       	ldi	r24, 0x0D	; 13
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0xc>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x16>
 112:	00 00       	nop
	_delay_ms(100);
	turnoff();
 114:	0e 94 51 00 	call	0xa2	; 0xa2 <turnoff>
	while(1) loop();
 118:	0e 94 66 00 	call	0xcc	; 0xcc <loop>
 11c:	fd cf       	rjmp	.-6      	; 0x118 <main+0x1c>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
