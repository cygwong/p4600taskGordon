
task12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e1  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000717  00000000  00000000  000009dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000311  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f0  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
#define F_CPU 10000000
#include <util/delay.h>

void setup()
{
	DDRB |= (1<<PB5);//clock as output
  80:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= (1<<PB3);//mosi as output
  82:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= (1<<PB6);//cs output as PB6
  84:	26 9a       	sbi	0x04, 6	; 4
	DDRB |= (1<<PB2);//ss as output
  86:	22 9a       	sbi	0x04, 2	; 4
	//spi
	SPCR |= (1<<SPE); //spi enable
  88:	8c b5       	in	r24, 0x2c	; 44
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	8c bd       	out	0x2c, r24	; 44
	//SPCR |= (1<<DORD);//data order
	SPCR |= (1<< MSTR);//set as master
  8e:	8c b5       	in	r24, 0x2c	; 44
  90:	80 61       	ori	r24, 0x10	; 16
  92:	8c bd       	out	0x2c, r24	; 44
	//SPCR |= (1<<CPOL);//polarty
	SPCR |= (1<<SPR0);//set clock freq
  94:	8c b5       	in	r24, 0x2c	; 44
  96:	81 60       	ori	r24, 0x01	; 1
  98:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<SPR1);
  9a:	8c b5       	in	r24, 0x2c	; 44
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	8c bd       	out	0x2c, r24	; 44
	
	PORTB |=(1<<PB6);//mosi and sck as outputs
  a0:	2e 9a       	sbi	0x05, 6	; 5
	PORTB |=(1<<PB5);
  a2:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f e3       	ldi	r18, 0x3F	; 63
  a6:	8d e0       	ldi	r24, 0x0D	; 13
  a8:	93 e0       	ldi	r25, 0x03	; 3
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <setup+0x2a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <setup+0x34>
  b4:	00 00       	nop
  b6:	08 95       	ret

000000b8 <send>:
void send(uint8_t num)
{
	uint8_t data = num;
	uint8_t datar;
	
	PORTB &= ~(1<<PB6);// pull chip select low
  b8:	2e 98       	cbi	0x05, 6	; 5
	
	SPDR = data;	
  ba:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
  bc:	0d b4       	in	r0, 0x2d	; 45
  be:	07 fe       	sbrs	r0, 7
  c0:	fd cf       	rjmp	.-6      	; 0xbc <send+0x4>
	
	datar = SPDR;
  c2:	8e b5       	in	r24, 0x2e	; 46
	PORTB |=(1<<PB6);
  c4:	2e 9a       	sbi	0x05, 6	; 5
	
	PORTB &= ~(1<<PB6);// pull chip select low
  c6:	2e 98       	cbi	0x05, 6	; 5
  c8:	08 95       	ret

000000ca <loop>:
}
void loop()
{
  ca:	cf 93       	push	r28
  cc:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t dat = 0;
	for (dat=0; dat<128; dat++)
	{
		send(dat);
  ce:	8c 2f       	mov	r24, r28
  d0:	0e 94 5c 00 	call	0xb8	; 0xb8 <send>
  d4:	2f e3       	ldi	r18, 0x3F	; 63
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	93 e0       	ldi	r25, 0x03	; 3
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <loop+0x10>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <loop+0x1a>
  e4:	00 00       	nop
	PORTB &= ~(1<<PB6);// pull chip select low
}
void loop()
{
	uint8_t dat = 0;
	for (dat=0; dat<128; dat++)
  e6:	cf 5f       	subi	r28, 0xFF	; 255
  e8:	c0 38       	cpi	r28, 0x80	; 128
  ea:	89 f7       	brne	.-30     	; 0xce <loop+0x4>
	{
		send(dat);
		_delay_ms(100);
	}
}
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:
int main(void)
{
	setup();
  f0:	0e 94 40 00 	call	0x80	; 0x80 <setup>
    /* Replace with your application code */
    while (1) loop();
  f4:	0e 94 65 00 	call	0xca	; 0xca <loop>
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <main+0x4>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
